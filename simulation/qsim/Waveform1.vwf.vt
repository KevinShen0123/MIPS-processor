// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/02/2022 12:52:06"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          sx
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sx_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [16:0] immed;
// wires                                               
wire [31:0] data_result;

// assign statements (if any)                          
sx i1 (
// port map - connection between master ports and signals/registers   
	.data_result(data_result),
	.immed(immed)
);
initial 
begin 
#1000000 $finish;
end 
// immed[ 16 ]
initial
begin
	immed[16] = 1'b0;
	immed[16] = #30000 1'b1;
	immed[16] = #10000 1'b0;
	immed[16] = #30000 1'b1;
	immed[16] = #20000 1'b0;
	immed[16] = #30000 1'b1;
	immed[16] = #10000 1'b0;
	immed[16] = #10000 1'b1;
	immed[16] = #10000 1'b0;
	immed[16] = #10000 1'b1;
	immed[16] = #20000 1'b0;
	immed[16] = #20000 1'b1;
	immed[16] = #20000 1'b0;
	immed[16] = #20000 1'b1;
	immed[16] = #20000 1'b0;
	immed[16] = #10000 1'b1;
	immed[16] = #10000 1'b0;
	immed[16] = #10000 1'b1;
	immed[16] = #40000 1'b0;
end 
// immed[ 15 ]
initial
begin
	immed[15] = 1'b0;
	immed[15] = #30000 1'b1;
	immed[15] = #10000 1'b0;
	immed[15] = #50000 1'b1;
	immed[15] = #20000 1'b0;
	immed[15] = #10000 1'b1;
	immed[15] = #30000 1'b0;
	immed[15] = #10000 1'b1;
	immed[15] = #10000 1'b0;
	immed[15] = #50000 1'b1;
	immed[15] = #10000 1'b0;
	immed[15] = #20000 1'b1;
	immed[15] = #20000 1'b0;
	immed[15] = #30000 1'b1;
	immed[15] = #10000 1'b0;
end 
// immed[ 14 ]
initial
begin
	immed[14] = 1'b0;
	immed[14] = #50000 1'b1;
	immed[14] = #10000 1'b0;
	immed[14] = #10000 1'b1;
	immed[14] = #10000 1'b0;
	immed[14] = #20000 1'b1;
	immed[14] = #10000 1'b0;
	immed[14] = #50000 1'b1;
	immed[14] = #40000 1'b0;
	immed[14] = #20000 1'b1;
	immed[14] = #10000 1'b0;
	immed[14] = #10000 1'b1;
	immed[14] = #10000 1'b0;
	immed[14] = #30000 1'b1;
	immed[14] = #10000 1'b0;
	immed[14] = #10000 1'b1;
	immed[14] = #20000 1'b0;
	immed[14] = #10000 1'b1;
	immed[14] = #10000 1'b0;
end 
// immed[ 13 ]
initial
begin
	immed[13] = 1'b0;
	immed[13] = #20000 1'b1;
	immed[13] = #10000 1'b0;
	immed[13] = #20000 1'b1;
	immed[13] = #10000 1'b0;
	immed[13] = #10000 1'b1;
	immed[13] = #20000 1'b0;
	immed[13] = #30000 1'b1;
	immed[13] = #10000 1'b0;
	immed[13] = #10000 1'b1;
	immed[13] = #40000 1'b0;
	immed[13] = #10000 1'b1;
	immed[13] = #30000 1'b0;
	immed[13] = #20000 1'b1;
	immed[13] = #10000 1'b0;
	immed[13] = #30000 1'b1;
	immed[13] = #10000 1'b0;
	immed[13] = #10000 1'b1;
	immed[13] = #30000 1'b0;
end 
// immed[ 12 ]
initial
begin
	immed[12] = 1'b0;
	immed[12] = #20000 1'b1;
	immed[12] = #10000 1'b0;
	immed[12] = #10000 1'b1;
	immed[12] = #20000 1'b0;
	immed[12] = #20000 1'b1;
	immed[12] = #10000 1'b0;
	immed[12] = #10000 1'b1;
	immed[12] = #10000 1'b0;
	immed[12] = #10000 1'b1;
	immed[12] = #10000 1'b0;
	immed[12] = #50000 1'b1;
	immed[12] = #10000 1'b0;
	immed[12] = #10000 1'b1;
	immed[12] = #10000 1'b0;
	immed[12] = #10000 1'b1;
	immed[12] = #10000 1'b0;
	immed[12] = #60000 1'b1;
	immed[12] = #20000 1'b0;
end 
// immed[ 11 ]
initial
begin
	immed[11] = 1'b0;
	immed[11] = #30000 1'b1;
	immed[11] = #10000 1'b0;
	immed[11] = #10000 1'b1;
	immed[11] = #20000 1'b0;
	immed[11] = #10000 1'b1;
	immed[11] = #10000 1'b0;
	immed[11] = #10000 1'b1;
	immed[11] = #10000 1'b0;
	immed[11] = #20000 1'b1;
	immed[11] = #10000 1'b0;
	immed[11] = #30000 1'b1;
	immed[11] = #30000 1'b0;
	immed[11] = #20000 1'b1;
	immed[11] = #10000 1'b0;
	immed[11] = #20000 1'b1;
	immed[11] = #20000 1'b0;
end 
// immed[ 10 ]
initial
begin
	immed[10] = 1'b0;
	immed[10] = #20000 1'b1;
	immed[10] = #20000 1'b0;
	immed[10] = #30000 1'b1;
	immed[10] = #10000 1'b0;
	immed[10] = #10000 1'b1;
	immed[10] = #20000 1'b0;
	immed[10] = #70000 1'b1;
	immed[10] = #10000 1'b0;
	immed[10] = #20000 1'b1;
	immed[10] = #20000 1'b0;
	immed[10] = #30000 1'b1;
	immed[10] = #10000 1'b0;
	immed[10] = #10000 1'b1;
	immed[10] = #10000 1'b0;
	immed[10] = #10000 1'b1;
	immed[10] = #10000 1'b0;
	immed[10] = #10000 1'b1;
	immed[10] = #20000 1'b0;
end 
// immed[ 9 ]
initial
begin
	immed[9] = 1'b0;
	immed[9] = #30000 1'b1;
	immed[9] = #20000 1'b0;
	immed[9] = #40000 1'b1;
	immed[9] = #10000 1'b0;
	immed[9] = #30000 1'b1;
	immed[9] = #10000 1'b0;
	immed[9] = #40000 1'b1;
	immed[9] = #30000 1'b0;
	immed[9] = #70000 1'b1;
	immed[9] = #10000 1'b0;
	immed[9] = #10000 1'b1;
	immed[9] = #10000 1'b0;
	immed[9] = #10000 1'b1;
	immed[9] = #10000 1'b0;
end 
// immed[ 8 ]
initial
begin
	immed[8] = 1'b0;
	immed[8] = #20000 1'b1;
	immed[8] = #30000 1'b0;
	immed[8] = #20000 1'b1;
	immed[8] = #30000 1'b0;
	immed[8] = #30000 1'b1;
	immed[8] = #30000 1'b0;
	immed[8] = #40000 1'b1;
	immed[8] = #20000 1'b0;
	immed[8] = #10000 1'b1;
	immed[8] = #10000 1'b0;
	immed[8] = #20000 1'b1;
	immed[8] = #60000 1'b0;
	immed[8] = #10000 1'b1;
	immed[8] = #10000 1'b0;
end 
// immed[ 7 ]
initial
begin
	immed[7] = 1'b0;
	immed[7] = #30000 1'b1;
	immed[7] = #10000 1'b0;
	immed[7] = #10000 1'b1;
	immed[7] = #10000 1'b0;
	immed[7] = #10000 1'b1;
	immed[7] = #10000 1'b0;
	immed[7] = #10000 1'b1;
	immed[7] = #20000 1'b0;
	immed[7] = #50000 1'b1;
	immed[7] = #60000 1'b0;
	immed[7] = #10000 1'b1;
	immed[7] = #20000 1'b0;
	immed[7] = #10000 1'b1;
	immed[7] = #20000 1'b0;
	immed[7] = #20000 1'b1;
	immed[7] = #40000 1'b0;
end 
// immed[ 6 ]
initial
begin
	immed[6] = 1'b0;
	immed[6] = #30000 1'b1;
	immed[6] = #10000 1'b0;
	immed[6] = #10000 1'b1;
	immed[6] = #10000 1'b0;
	immed[6] = #20000 1'b1;
	immed[6] = #10000 1'b0;
	immed[6] = #20000 1'b1;
	immed[6] = #10000 1'b0;
	immed[6] = #20000 1'b1;
	immed[6] = #30000 1'b0;
	immed[6] = #10000 1'b1;
	immed[6] = #10000 1'b0;
	immed[6] = #30000 1'b1;
	immed[6] = #10000 1'b0;
	immed[6] = #10000 1'b1;
	immed[6] = #40000 1'b0;
	immed[6] = #10000 1'b1;
	immed[6] = #50000 1'b0;
end 
// immed[ 5 ]
initial
begin
	immed[5] = 1'b0;
	immed[5] = #30000 1'b1;
	immed[5] = #10000 1'b0;
	immed[5] = #20000 1'b1;
	immed[5] = #20000 1'b0;
	immed[5] = #10000 1'b1;
	immed[5] = #10000 1'b0;
	immed[5] = #10000 1'b1;
	immed[5] = #20000 1'b0;
	immed[5] = #20000 1'b1;
	immed[5] = #10000 1'b0;
	immed[5] = #30000 1'b1;
	immed[5] = #30000 1'b0;
	immed[5] = #10000 1'b1;
	immed[5] = #40000 1'b0;
	immed[5] = #10000 1'b1;
	immed[5] = #20000 1'b0;
	immed[5] = #10000 1'b1;
	immed[5] = #20000 1'b0;
end 
// immed[ 4 ]
initial
begin
	immed[4] = 1'b0;
	immed[4] = #30000 1'b1;
	immed[4] = #10000 1'b0;
	immed[4] = #10000 1'b1;
	immed[4] = #10000 1'b0;
	immed[4] = #40000 1'b1;
	immed[4] = #10000 1'b0;
	immed[4] = #20000 1'b1;
	immed[4] = #10000 1'b0;
	immed[4] = #20000 1'b1;
	immed[4] = #10000 1'b0;
	immed[4] = #40000 1'b1;
	immed[4] = #60000 1'b0;
	immed[4] = #30000 1'b1;
	immed[4] = #20000 1'b0;
	immed[4] = #10000 1'b1;
	immed[4] = #10000 1'b0;
end 
// immed[ 3 ]
initial
begin
	immed[3] = 1'b0;
	immed[3] = #60000 1'b1;
	immed[3] = #40000 1'b0;
	immed[3] = #20000 1'b1;
	immed[3] = #20000 1'b0;
	immed[3] = #20000 1'b1;
	immed[3] = #10000 1'b0;
	immed[3] = #20000 1'b1;
	immed[3] = #100000 1'b0;
	immed[3] = #20000 1'b1;
	immed[3] = #30000 1'b0;
end 
// immed[ 2 ]
initial
begin
	immed[2] = 1'b0;
	immed[2] = #60000 1'b1;
	immed[2] = #40000 1'b0;
	immed[2] = #10000 1'b1;
	immed[2] = #10000 1'b0;
	immed[2] = #10000 1'b1;
	immed[2] = #80000 1'b0;
	immed[2] = #50000 1'b1;
	immed[2] = #20000 1'b0;
	immed[2] = #30000 1'b1;
	immed[2] = #30000 1'b0;
end 
// immed[ 1 ]
initial
begin
	immed[1] = 1'b0;
	immed[1] = #20000 1'b1;
	immed[1] = #10000 1'b0;
	immed[1] = #10000 1'b1;
	immed[1] = #10000 1'b0;
	immed[1] = #10000 1'b1;
	immed[1] = #30000 1'b0;
	immed[1] = #10000 1'b1;
	immed[1] = #50000 1'b0;
	immed[1] = #10000 1'b1;
	immed[1] = #10000 1'b0;
	immed[1] = #10000 1'b1;
	immed[1] = #10000 1'b0;
	immed[1] = #10000 1'b1;
	immed[1] = #10000 1'b0;
	immed[1] = #40000 1'b1;
	immed[1] = #20000 1'b0;
	immed[1] = #20000 1'b1;
	immed[1] = #20000 1'b0;
	immed[1] = #10000 1'b1;
	immed[1] = #20000 1'b0;
end 
// immed[ 0 ]
initial
begin
	immed[0] = 1'b0;
	immed[0] = #20000 1'b1;
	immed[0] = #60000 1'b0;
	immed[0] = #10000 1'b1;
	immed[0] = #10000 1'b0;
	immed[0] = #20000 1'b1;
	immed[0] = #50000 1'b0;
	immed[0] = #10000 1'b1;
	immed[0] = #20000 1'b0;
	immed[0] = #20000 1'b1;
	immed[0] = #30000 1'b0;
	immed[0] = #20000 1'b1;
	immed[0] = #30000 1'b0;
end 
endmodule

